# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InstrumentInfoDetailed(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, instrument_id=None, open_hour=None, open_minute=None, close_hour=None, close_minute=None, is24h_market=False, orb5_min_open_hour=None, time_zone_id=None, pips_decimals=None):
        """
        InstrumentInfoDetailed - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'instrument_id': 'str',
            'open_hour': 'int',
            'open_minute': 'int',
            'close_hour': 'int',
            'close_minute': 'int',
            'is24h_market': 'bool',
            'orb5_min_open_hour': 'int',
            'time_zone_id': 'str',
            'pips_decimals': 'int'
        }

        self.attribute_map = {
            'instrument_id': 'instrumentId',
            'open_hour': 'openHour',
            'open_minute': 'openMinute',
            'close_hour': 'closeHour',
            'close_minute': 'closeMinute',
            'is24h_market': 'is24hMarket',
            'orb5_min_open_hour': 'orb5MinOpenHour',
            'time_zone_id': 'timeZoneId',
            'pips_decimals': 'pipsDecimals'
        }

        self._instrument_id = instrument_id
        self._open_hour = open_hour
        self._open_minute = open_minute
        self._close_hour = close_hour
        self._close_minute = close_minute
        self._is24h_market = is24h_market
        self._orb5_min_open_hour = orb5_min_open_hour
        self._time_zone_id = time_zone_id
        self._pips_decimals = pips_decimals


    @property
    def instrument_id(self):
        """
        Gets the instrument_id of this InstrumentInfoDetailed.


        :return: The instrument_id of this InstrumentInfoDetailed.
        :rtype: str
        """
        return self._instrument_id

    @instrument_id.setter
    def instrument_id(self, instrument_id):
        """
        Sets the instrument_id of this InstrumentInfoDetailed.


        :param instrument_id: The instrument_id of this InstrumentInfoDetailed.
        :type: str
        """

        self._instrument_id = instrument_id

    @property
    def open_hour(self):
        """
        Gets the open_hour of this InstrumentInfoDetailed.


        :return: The open_hour of this InstrumentInfoDetailed.
        :rtype: int
        """
        return self._open_hour

    @open_hour.setter
    def open_hour(self, open_hour):
        """
        Sets the open_hour of this InstrumentInfoDetailed.


        :param open_hour: The open_hour of this InstrumentInfoDetailed.
        :type: int
        """

        self._open_hour = open_hour

    @property
    def open_minute(self):
        """
        Gets the open_minute of this InstrumentInfoDetailed.


        :return: The open_minute of this InstrumentInfoDetailed.
        :rtype: int
        """
        return self._open_minute

    @open_minute.setter
    def open_minute(self, open_minute):
        """
        Sets the open_minute of this InstrumentInfoDetailed.


        :param open_minute: The open_minute of this InstrumentInfoDetailed.
        :type: int
        """

        self._open_minute = open_minute

    @property
    def close_hour(self):
        """
        Gets the close_hour of this InstrumentInfoDetailed.


        :return: The close_hour of this InstrumentInfoDetailed.
        :rtype: int
        """
        return self._close_hour

    @close_hour.setter
    def close_hour(self, close_hour):
        """
        Sets the close_hour of this InstrumentInfoDetailed.


        :param close_hour: The close_hour of this InstrumentInfoDetailed.
        :type: int
        """

        self._close_hour = close_hour

    @property
    def close_minute(self):
        """
        Gets the close_minute of this InstrumentInfoDetailed.


        :return: The close_minute of this InstrumentInfoDetailed.
        :rtype: int
        """
        return self._close_minute

    @close_minute.setter
    def close_minute(self, close_minute):
        """
        Sets the close_minute of this InstrumentInfoDetailed.


        :param close_minute: The close_minute of this InstrumentInfoDetailed.
        :type: int
        """

        self._close_minute = close_minute

    @property
    def is24h_market(self):
        """
        Gets the is24h_market of this InstrumentInfoDetailed.


        :return: The is24h_market of this InstrumentInfoDetailed.
        :rtype: bool
        """
        return self._is24h_market

    @is24h_market.setter
    def is24h_market(self, is24h_market):
        """
        Sets the is24h_market of this InstrumentInfoDetailed.


        :param is24h_market: The is24h_market of this InstrumentInfoDetailed.
        :type: bool
        """

        self._is24h_market = is24h_market

    @property
    def orb5_min_open_hour(self):
        """
        Gets the orb5_min_open_hour of this InstrumentInfoDetailed.


        :return: The orb5_min_open_hour of this InstrumentInfoDetailed.
        :rtype: int
        """
        return self._orb5_min_open_hour

    @orb5_min_open_hour.setter
    def orb5_min_open_hour(self, orb5_min_open_hour):
        """
        Sets the orb5_min_open_hour of this InstrumentInfoDetailed.


        :param orb5_min_open_hour: The orb5_min_open_hour of this InstrumentInfoDetailed.
        :type: int
        """

        self._orb5_min_open_hour = orb5_min_open_hour

    @property
    def time_zone_id(self):
        """
        Gets the time_zone_id of this InstrumentInfoDetailed.


        :return: The time_zone_id of this InstrumentInfoDetailed.
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """
        Sets the time_zone_id of this InstrumentInfoDetailed.


        :param time_zone_id: The time_zone_id of this InstrumentInfoDetailed.
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def pips_decimals(self):
        """
        Gets the pips_decimals of this InstrumentInfoDetailed.


        :return: The pips_decimals of this InstrumentInfoDetailed.
        :rtype: int
        """
        return self._pips_decimals

    @pips_decimals.setter
    def pips_decimals(self, pips_decimals):
        """
        Sets the pips_decimals of this InstrumentInfoDetailed.


        :param pips_decimals: The pips_decimals of this InstrumentInfoDetailed.
        :type: int
        """

        self._pips_decimals = pips_decimals

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
