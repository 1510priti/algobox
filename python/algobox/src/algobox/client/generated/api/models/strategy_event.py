# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StrategyEvent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, timestamp=None, data=None, price_tick=None, strategy_event_type=None, message=None):
        """
        StrategyEvent - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'timestamp': 'int',
            'data': 'str',
            'price_tick': 'PriceTick',
            'strategy_event_type': 'str',
            'message': 'str'
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'data': 'data',
            'price_tick': 'priceTick',
            'strategy_event_type': 'strategyEventType',
            'message': 'message'
        }

        self._timestamp = timestamp
        self._data = data
        self._price_tick = price_tick
        self._strategy_event_type = strategy_event_type
        self._message = message


    @property
    def timestamp(self):
        """
        Gets the timestamp of this StrategyEvent.


        :return: The timestamp of this StrategyEvent.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this StrategyEvent.


        :param timestamp: The timestamp of this StrategyEvent.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def data(self):
        """
        Gets the data of this StrategyEvent.


        :return: The data of this StrategyEvent.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this StrategyEvent.


        :param data: The data of this StrategyEvent.
        :type: str
        """

        self._data = data

    @property
    def price_tick(self):
        """
        Gets the price_tick of this StrategyEvent.


        :return: The price_tick of this StrategyEvent.
        :rtype: PriceTick
        """
        return self._price_tick

    @price_tick.setter
    def price_tick(self, price_tick):
        """
        Sets the price_tick of this StrategyEvent.


        :param price_tick: The price_tick of this StrategyEvent.
        :type: PriceTick
        """

        self._price_tick = price_tick

    @property
    def strategy_event_type(self):
        """
        Gets the strategy_event_type of this StrategyEvent.


        :return: The strategy_event_type of this StrategyEvent.
        :rtype: str
        """
        return self._strategy_event_type

    @strategy_event_type.setter
    def strategy_event_type(self, strategy_event_type):
        """
        Sets the strategy_event_type of this StrategyEvent.


        :param strategy_event_type: The strategy_event_type of this StrategyEvent.
        :type: str
        """
        allowed_values = ["PATTERN", "ORDER_SENT", "ERROR"]
        if strategy_event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy_event_type` ({0}), must be one of {1}"
                .format(strategy_event_type, allowed_values)
            )

        self._strategy_event_type = strategy_event_type

    @property
    def message(self):
        """
        Gets the message of this StrategyEvent.


        :return: The message of this StrategyEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this StrategyEvent.


        :param message: The message of this StrategyEvent.
        :type: str
        """

        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
