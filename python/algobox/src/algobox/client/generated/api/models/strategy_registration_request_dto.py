# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StrategyRegistrationRequestDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, strategy_id=None, title=None, parameters=None, instruments_mapping=None):
        """
        StrategyRegistrationRequestDto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'strategy_id': 'str',
            'title': 'str',
            'parameters': 'dict(str, str)',
            'instruments_mapping': 'list[InstrumentMapping]'
        }

        self.attribute_map = {
            'strategy_id': 'strategyId',
            'title': 'title',
            'parameters': 'parameters',
            'instruments_mapping': 'instrumentsMapping'
        }

        self._strategy_id = strategy_id
        self._title = title
        self._parameters = parameters
        self._instruments_mapping = instruments_mapping


    @property
    def strategy_id(self):
        """
        Gets the strategy_id of this StrategyRegistrationRequestDto.


        :return: The strategy_id of this StrategyRegistrationRequestDto.
        :rtype: str
        """
        return self._strategy_id

    @strategy_id.setter
    def strategy_id(self, strategy_id):
        """
        Sets the strategy_id of this StrategyRegistrationRequestDto.


        :param strategy_id: The strategy_id of this StrategyRegistrationRequestDto.
        :type: str
        """

        self._strategy_id = strategy_id

    @property
    def title(self):
        """
        Gets the title of this StrategyRegistrationRequestDto.


        :return: The title of this StrategyRegistrationRequestDto.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this StrategyRegistrationRequestDto.


        :param title: The title of this StrategyRegistrationRequestDto.
        :type: str
        """

        self._title = title

    @property
    def parameters(self):
        """
        Gets the parameters of this StrategyRegistrationRequestDto.


        :return: The parameters of this StrategyRegistrationRequestDto.
        :rtype: dict(str, str)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this StrategyRegistrationRequestDto.


        :param parameters: The parameters of this StrategyRegistrationRequestDto.
        :type: dict(str, str)
        """

        self._parameters = parameters

    @property
    def instruments_mapping(self):
        """
        Gets the instruments_mapping of this StrategyRegistrationRequestDto.


        :return: The instruments_mapping of this StrategyRegistrationRequestDto.
        :rtype: list[InstrumentMapping]
        """
        return self._instruments_mapping

    @instruments_mapping.setter
    def instruments_mapping(self, instruments_mapping):
        """
        Sets the instruments_mapping of this StrategyRegistrationRequestDto.


        :param instruments_mapping: The instruments_mapping of this StrategyRegistrationRequestDto.
        :type: list[InstrumentMapping]
        """

        self._instruments_mapping = instruments_mapping

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
