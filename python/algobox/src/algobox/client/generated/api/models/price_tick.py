# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PriceTick(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, instrument=None, time=None, ask=None, bid=None):
        """
        PriceTick - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'instrument': 'str',
            'time': 'int',
            'ask': 'float',
            'bid': 'float'
        }

        self.attribute_map = {
            'instrument': 'instrument',
            'time': 'time',
            'ask': 'ask',
            'bid': 'bid'
        }

        self._instrument = instrument
        self._time = time
        self._ask = ask
        self._bid = bid


    @property
    def instrument(self):
        """
        Gets the instrument of this PriceTick.


        :return: The instrument of this PriceTick.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """
        Sets the instrument of this PriceTick.


        :param instrument: The instrument of this PriceTick.
        :type: str
        """

        self._instrument = instrument

    @property
    def time(self):
        """
        Gets the time of this PriceTick.


        :return: The time of this PriceTick.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this PriceTick.


        :param time: The time of this PriceTick.
        :type: int
        """

        self._time = time

    @property
    def ask(self):
        """
        Gets the ask of this PriceTick.


        :return: The ask of this PriceTick.
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """
        Sets the ask of this PriceTick.


        :param ask: The ask of this PriceTick.
        :type: float
        """

        self._ask = ask

    @property
    def bid(self):
        """
        Gets the bid of this PriceTick.


        :return: The bid of this PriceTick.
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """
        Sets the bid of this PriceTick.


        :param bid: The bid of this PriceTick.
        :type: float
        """

        self._bid = bid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
