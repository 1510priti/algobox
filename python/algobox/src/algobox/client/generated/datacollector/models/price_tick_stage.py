# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PriceTickStage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, time=None, instrument=None, ask=None, bid=None, src=None):
        """
        PriceTickStage - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'time': 'int',
            'instrument': 'str',
            'ask': 'float',
            'bid': 'float',
            'src': 'str'
        }

        self.attribute_map = {
            'time': 'time',
            'instrument': 'instrument',
            'ask': 'ask',
            'bid': 'bid',
            'src': 'src'
        }

        self._time = time
        self._instrument = instrument
        self._ask = ask
        self._bid = bid
        self._src = src


    @property
    def time(self):
        """
        Gets the time of this PriceTickStage.


        :return: The time of this PriceTickStage.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """
        Sets the time of this PriceTickStage.


        :param time: The time of this PriceTickStage.
        :type: int
        """

        self._time = time

    @property
    def instrument(self):
        """
        Gets the instrument of this PriceTickStage.


        :return: The instrument of this PriceTickStage.
        :rtype: str
        """
        return self._instrument

    @instrument.setter
    def instrument(self, instrument):
        """
        Sets the instrument of this PriceTickStage.


        :param instrument: The instrument of this PriceTickStage.
        :type: str
        """

        self._instrument = instrument

    @property
    def ask(self):
        """
        Gets the ask of this PriceTickStage.


        :return: The ask of this PriceTickStage.
        :rtype: float
        """
        return self._ask

    @ask.setter
    def ask(self, ask):
        """
        Sets the ask of this PriceTickStage.


        :param ask: The ask of this PriceTickStage.
        :type: float
        """

        self._ask = ask

    @property
    def bid(self):
        """
        Gets the bid of this PriceTickStage.


        :return: The bid of this PriceTickStage.
        :rtype: float
        """
        return self._bid

    @bid.setter
    def bid(self, bid):
        """
        Sets the bid of this PriceTickStage.


        :param bid: The bid of this PriceTickStage.
        :type: float
        """

        self._bid = bid

    @property
    def src(self):
        """
        Gets the src of this PriceTickStage.


        :return: The src of this PriceTickStage.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """
        Sets the src of this PriceTickStage.


        :param src: The src of this PriceTickStage.
        :type: str
        """

        self._src = src

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
